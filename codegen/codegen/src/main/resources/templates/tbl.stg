import "types.stg"
import "jdbc-types.stg"

jdbcType(typeInfo) ::= <%
<if(typeInfo.elementComposite)>STRUCT
<else><jdbcTypeNameMap.(typeInfo.elementTypeName)>
<endif>
%>

baseTypeName(typeInfo) ::= <%
<if(typeInfo.elementComposite)><typeInfo:compositeTypeParameter()>.SQL_TYPE_NAME
<else>"<typeInfo:javaTypeParameter()>"
<endif>
%>

arrayType(typeInfo) ::= <%
<if(typeInfo.elementComposite)>StructArrayList\<<typeInfo:compositeTypeParameter()>>
<else>JdbcArrayList\<<typeInfo:javaTypeParameter()>>
<endif>
%>

typeParameter(typeInfo) ::= <%
<if(typeInfo.elementComposite)><typeInfo:compositeTypeParameter()>
<else><typeInfo:javaTypeParameter()>
<endif>
%>

compositeTypeParameter(typeInfo) ::= <<
<package>.<typeInfo.schemaName>.<typeInfo.elementClassName>
>>

javaTypeParameter(typeInfo) ::= <<
<javaTypeNameMap.(typeInfo.elementTypeName)>
>>

main(typeInfo,isInPackage,package,created) ::= <<
package <package>.<typeInfo.schemaName>;

import com.terradatum.jdbc.JdbcArrayList;
import com.terradatum.jdbc.StructArrayList;

import java.lang.reflect.InvocationTargetException;
import java.sql.Array;
import java.sql.SQLException;
import java.util.ArrayList;

import static java.sql.Types.*;

/**
 * DO NOT MODIFY!!! This class was generated by the Terradatum JDBC Code Generator and will be overwritten if regenerated
 * @date <created>
 */
public class <typeInfo.className> extends <typeInfo:arrayType()> {
  public static final String SQL_TYPE_NAME = "<typeInfo.typeName>";
  public static final char EDB_ARRAY_DELIMITER = '<typeInfo.edbArrayDelimiter>';
  private final ArrayList\<<typeInfo:typeParameter()>\> delegate = new ArrayList\<>();

  /**
   * Required default constructor.
   */
  @SuppressWarnings("unused")
  public <typeInfo.className>() {}

  @Override
  protected ArrayList\<<typeInfo:typeParameter()>\> delegate() {
    return delegate;
  }

  @Override
  public String getSQLTypeName() {
    return SQL_TYPE_NAME;
  }

  @Override
  public String getBaseTypeName() {
    return <typeInfo:baseTypeName()>;
  }

  @Override
  public int getBaseType() {
    return <typeInfo:jdbcType()>;
  }

  @Override
  public char getEdbArrayDelimiter() {
    return EDB_ARRAY_DELIMITER;
  }

  @Override
  public <typeInfo.className> setArray(Array array) throws SQLException, InvocationTargetException,
      NoSuchMethodException, IllegalAccessException, NoSuchFieldException {
    super.setArray(array);
    return this;
  }

  @Override
  public <typeInfo.className> setElements(<typeInfo:typeParameter()>[] elements) throws SQLException {
    super.setElements(elements);
    return this;
  }
}
>>